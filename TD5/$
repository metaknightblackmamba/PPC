#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""This is a awesome
    python script...!"""


from multiprocessing import Process, Manager
import array
from threading import Thread, Semaphore, Lock

BUFFER_SIZE = 5
en = 0
out = 0
global consFlag

def fibo_prod(n, buffer, full, empty, mutex):
  a, b = 0, 1
  i = 0
  while i < n:
  a, b = b, a+b
  empty.acquire()
  with mutex:
  buffer[p] = a
  print(current_thread().name, "produces:", a, "in", p, flush = True)
  p = (p+1)% BUFFER_SIZE
  i += 1
  full.release()
  consFlag = False
  
def fibo_cons(buffer, full, empty, mutex):
  i = 0
  while consFlag:
  full.acquire()
  with mutex:
  res = buffer[i]
  print(current_thread().name, "consumes:", res, "from:", i,
  =True)
  i = (i+1)%BUFFER_SIZE
  empty.release()


if __name__ == '__main__':
  
  buffer = array.array('l', range(BUFFER_SIZE))
  index = int(input("Entrez indice "))
  
  mutex = Lock()
  full = Semaphore(0)
  empty = Semaphore(BUFFER_SIZE)
  
  cons = Thread(target=fibo_cons, args=(buffer, full, empty, mutex))
  prod = Thread(target=fibo_prod, args=(index, buffer, full, empty, mutex))
  
  cons.start()
  prod.start()
  
  cons.join()
  prod.join()
